// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"DiTing-Go/dal/model"
)

func newContact(db *gorm.DB, opts ...gen.DOOption) contact {
	_contact := contact{}

	_contact.contactDo.UseDB(db, opts...)
	_contact.contactDo.UseModel(&model.Contact{})

	tableName := _contact.contactDo.TableName()
	_contact.ALL = field.NewAsterisk(tableName)
	_contact.ID = field.NewInt64(tableName, "id")
	_contact.UID = field.NewInt64(tableName, "uid")
	_contact.RoomID = field.NewInt64(tableName, "room_id")
	_contact.ReadTime = field.NewTime(tableName, "read_time")
	_contact.ActiveTime = field.NewTime(tableName, "active_time")
	_contact.LastMsgID = field.NewInt64(tableName, "last_msg_id")
	_contact.CreateTime = field.NewTime(tableName, "create_time")
	_contact.UpdateTime = field.NewTime(tableName, "update_time")

	_contact.fillFieldMap()

	return _contact
}

// contact 会话列表
type contact struct {
	contactDo contactDo

	ALL        field.Asterisk
	ID         field.Int64 // id
	UID        field.Int64 // uid
	RoomID     field.Int64 // 房间id
	ReadTime   field.Time  // 阅读到的时间
	ActiveTime field.Time  // 会话内消息最后更新的时间(只有普通会话需要维护，全员会话不需要维护)
	LastMsgID  field.Int64 // 会话最新消息id
	CreateTime field.Time
	UpdateTime field.Time

	fieldMap map[string]field.Expr
}

func (c contact) Table(newTableName string) *contact {
	c.contactDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c contact) As(alias string) *contact {
	c.contactDo.DO = *(c.contactDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *contact) updateTableName(table string) *contact {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.UID = field.NewInt64(table, "uid")
	c.RoomID = field.NewInt64(table, "room_id")
	c.ReadTime = field.NewTime(table, "read_time")
	c.ActiveTime = field.NewTime(table, "active_time")
	c.LastMsgID = field.NewInt64(table, "last_msg_id")
	c.CreateTime = field.NewTime(table, "create_time")
	c.UpdateTime = field.NewTime(table, "update_time")

	c.fillFieldMap()

	return c
}

func (c *contact) WithContext(ctx context.Context) IContactDo { return c.contactDo.WithContext(ctx) }

func (c contact) TableName() string { return c.contactDo.TableName() }

func (c contact) Alias() string { return c.contactDo.Alias() }

func (c contact) Columns(cols ...field.Expr) gen.Columns { return c.contactDo.Columns(cols...) }

func (c *contact) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *contact) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 8)
	c.fieldMap["id"] = c.ID
	c.fieldMap["uid"] = c.UID
	c.fieldMap["room_id"] = c.RoomID
	c.fieldMap["read_time"] = c.ReadTime
	c.fieldMap["active_time"] = c.ActiveTime
	c.fieldMap["last_msg_id"] = c.LastMsgID
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["update_time"] = c.UpdateTime
}

func (c contact) clone(db *gorm.DB) contact {
	c.contactDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c contact) replaceDB(db *gorm.DB) contact {
	c.contactDo.ReplaceDB(db)
	return c
}

type contactDo struct{ gen.DO }

type IContactDo interface {
	gen.SubQuery
	Debug() IContactDo
	WithContext(ctx context.Context) IContactDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IContactDo
	WriteDB() IContactDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IContactDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IContactDo
	Not(conds ...gen.Condition) IContactDo
	Or(conds ...gen.Condition) IContactDo
	Select(conds ...field.Expr) IContactDo
	Where(conds ...gen.Condition) IContactDo
	Order(conds ...field.Expr) IContactDo
	Distinct(cols ...field.Expr) IContactDo
	Omit(cols ...field.Expr) IContactDo
	Join(table schema.Tabler, on ...field.Expr) IContactDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IContactDo
	RightJoin(table schema.Tabler, on ...field.Expr) IContactDo
	Group(cols ...field.Expr) IContactDo
	Having(conds ...gen.Condition) IContactDo
	Limit(limit int) IContactDo
	Offset(offset int) IContactDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IContactDo
	Unscoped() IContactDo
	Create(values ...*model.Contact) error
	CreateInBatches(values []*model.Contact, batchSize int) error
	Save(values ...*model.Contact) error
	First() (*model.Contact, error)
	Take() (*model.Contact, error)
	Last() (*model.Contact, error)
	Find() ([]*model.Contact, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Contact, err error)
	FindInBatches(result *[]*model.Contact, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Contact) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IContactDo
	Assign(attrs ...field.AssignExpr) IContactDo
	Joins(fields ...field.RelationField) IContactDo
	Preload(fields ...field.RelationField) IContactDo
	FirstOrInit() (*model.Contact, error)
	FirstOrCreate() (*model.Contact, error)
	FindByPage(offset int, limit int) (result []*model.Contact, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IContactDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c contactDo) Debug() IContactDo {
	return c.withDO(c.DO.Debug())
}

func (c contactDo) WithContext(ctx context.Context) IContactDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c contactDo) ReadDB() IContactDo {
	return c.Clauses(dbresolver.Read)
}

func (c contactDo) WriteDB() IContactDo {
	return c.Clauses(dbresolver.Write)
}

func (c contactDo) Session(config *gorm.Session) IContactDo {
	return c.withDO(c.DO.Session(config))
}

func (c contactDo) Clauses(conds ...clause.Expression) IContactDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c contactDo) Returning(value interface{}, columns ...string) IContactDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c contactDo) Not(conds ...gen.Condition) IContactDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c contactDo) Or(conds ...gen.Condition) IContactDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c contactDo) Select(conds ...field.Expr) IContactDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c contactDo) Where(conds ...gen.Condition) IContactDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c contactDo) Order(conds ...field.Expr) IContactDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c contactDo) Distinct(cols ...field.Expr) IContactDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c contactDo) Omit(cols ...field.Expr) IContactDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c contactDo) Join(table schema.Tabler, on ...field.Expr) IContactDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c contactDo) LeftJoin(table schema.Tabler, on ...field.Expr) IContactDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c contactDo) RightJoin(table schema.Tabler, on ...field.Expr) IContactDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c contactDo) Group(cols ...field.Expr) IContactDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c contactDo) Having(conds ...gen.Condition) IContactDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c contactDo) Limit(limit int) IContactDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c contactDo) Offset(offset int) IContactDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c contactDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IContactDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c contactDo) Unscoped() IContactDo {
	return c.withDO(c.DO.Unscoped())
}

func (c contactDo) Create(values ...*model.Contact) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c contactDo) CreateInBatches(values []*model.Contact, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c contactDo) Save(values ...*model.Contact) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c contactDo) First() (*model.Contact, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Contact), nil
	}
}

func (c contactDo) Take() (*model.Contact, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Contact), nil
	}
}

func (c contactDo) Last() (*model.Contact, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Contact), nil
	}
}

func (c contactDo) Find() ([]*model.Contact, error) {
	result, err := c.DO.Find()
	return result.([]*model.Contact), err
}

func (c contactDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Contact, err error) {
	buf := make([]*model.Contact, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c contactDo) FindInBatches(result *[]*model.Contact, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c contactDo) Attrs(attrs ...field.AssignExpr) IContactDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c contactDo) Assign(attrs ...field.AssignExpr) IContactDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c contactDo) Joins(fields ...field.RelationField) IContactDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c contactDo) Preload(fields ...field.RelationField) IContactDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c contactDo) FirstOrInit() (*model.Contact, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Contact), nil
	}
}

func (c contactDo) FirstOrCreate() (*model.Contact, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Contact), nil
	}
}

func (c contactDo) FindByPage(offset int, limit int) (result []*model.Contact, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c contactDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c contactDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c contactDo) Delete(models ...*model.Contact) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *contactDo) withDO(do gen.Dao) *contactDo {
	c.DO = *do.(*gen.DO)
	return c
}
