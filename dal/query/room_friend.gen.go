// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"DiTing-Go/dal/model"
)

func newRoomFriend(db *gorm.DB, opts ...gen.DOOption) roomFriend {
	_roomFriend := roomFriend{}

	_roomFriend.roomFriendDo.UseDB(db, opts...)
	_roomFriend.roomFriendDo.UseModel(&model.RoomFriend{})

	tableName := _roomFriend.roomFriendDo.TableName()
	_roomFriend.ALL = field.NewAsterisk(tableName)
	_roomFriend.ID = field.NewInt64(tableName, "id")
	_roomFriend.RoomID = field.NewInt64(tableName, "room_id")
	_roomFriend.Uid1 = field.NewInt64(tableName, "uid1")
	_roomFriend.Uid2 = field.NewInt64(tableName, "uid2")
	_roomFriend.RoomKey = field.NewString(tableName, "room_key")
	_roomFriend.DeleteStatus = field.NewInt32(tableName, "delete_status")
	_roomFriend.CreateTime = field.NewTime(tableName, "create_time")
	_roomFriend.UpdateTime = field.NewTime(tableName, "update_time")

	_roomFriend.fillFieldMap()

	return _roomFriend
}

// roomFriend 单聊房间表
type roomFriend struct {
	roomFriendDo roomFriendDo

	ALL          field.Asterisk
	ID           field.Int64  // id
	RoomID       field.Int64  // 房间id
	Uid1         field.Int64  // uid1（更小的uid）
	Uid2         field.Int64  // uid2（更大的uid）
	RoomKey      field.String // 房间key由两个uid拼接，先做排序uid1_uid2
	DeleteStatus field.Int32  // 房间状态 1正常 2禁用(删好友了禁用)
	CreateTime   field.Time
	UpdateTime   field.Time

	fieldMap map[string]field.Expr
}

func (r roomFriend) Table(newTableName string) *roomFriend {
	r.roomFriendDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r roomFriend) As(alias string) *roomFriend {
	r.roomFriendDo.DO = *(r.roomFriendDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *roomFriend) updateTableName(table string) *roomFriend {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.RoomID = field.NewInt64(table, "room_id")
	r.Uid1 = field.NewInt64(table, "uid1")
	r.Uid2 = field.NewInt64(table, "uid2")
	r.RoomKey = field.NewString(table, "room_key")
	r.DeleteStatus = field.NewInt32(table, "delete_status")
	r.CreateTime = field.NewTime(table, "create_time")
	r.UpdateTime = field.NewTime(table, "update_time")

	r.fillFieldMap()

	return r
}

func (r *roomFriend) WithContext(ctx context.Context) IRoomFriendDo {
	return r.roomFriendDo.WithContext(ctx)
}

func (r roomFriend) TableName() string { return r.roomFriendDo.TableName() }

func (r roomFriend) Alias() string { return r.roomFriendDo.Alias() }

func (r roomFriend) Columns(cols ...field.Expr) gen.Columns { return r.roomFriendDo.Columns(cols...) }

func (r *roomFriend) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *roomFriend) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 8)
	r.fieldMap["id"] = r.ID
	r.fieldMap["room_id"] = r.RoomID
	r.fieldMap["uid1"] = r.Uid1
	r.fieldMap["uid2"] = r.Uid2
	r.fieldMap["room_key"] = r.RoomKey
	r.fieldMap["delete_status"] = r.DeleteStatus
	r.fieldMap["create_time"] = r.CreateTime
	r.fieldMap["update_time"] = r.UpdateTime
}

func (r roomFriend) clone(db *gorm.DB) roomFriend {
	r.roomFriendDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r roomFriend) replaceDB(db *gorm.DB) roomFriend {
	r.roomFriendDo.ReplaceDB(db)
	return r
}

type roomFriendDo struct{ gen.DO }

type IRoomFriendDo interface {
	gen.SubQuery
	Debug() IRoomFriendDo
	WithContext(ctx context.Context) IRoomFriendDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRoomFriendDo
	WriteDB() IRoomFriendDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRoomFriendDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRoomFriendDo
	Not(conds ...gen.Condition) IRoomFriendDo
	Or(conds ...gen.Condition) IRoomFriendDo
	Select(conds ...field.Expr) IRoomFriendDo
	Where(conds ...gen.Condition) IRoomFriendDo
	Order(conds ...field.Expr) IRoomFriendDo
	Distinct(cols ...field.Expr) IRoomFriendDo
	Omit(cols ...field.Expr) IRoomFriendDo
	Join(table schema.Tabler, on ...field.Expr) IRoomFriendDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRoomFriendDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRoomFriendDo
	Group(cols ...field.Expr) IRoomFriendDo
	Having(conds ...gen.Condition) IRoomFriendDo
	Limit(limit int) IRoomFriendDo
	Offset(offset int) IRoomFriendDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRoomFriendDo
	Unscoped() IRoomFriendDo
	Create(values ...*model.RoomFriend) error
	CreateInBatches(values []*model.RoomFriend, batchSize int) error
	Save(values ...*model.RoomFriend) error
	First() (*model.RoomFriend, error)
	Take() (*model.RoomFriend, error)
	Last() (*model.RoomFriend, error)
	Find() ([]*model.RoomFriend, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RoomFriend, err error)
	FindInBatches(result *[]*model.RoomFriend, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RoomFriend) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRoomFriendDo
	Assign(attrs ...field.AssignExpr) IRoomFriendDo
	Joins(fields ...field.RelationField) IRoomFriendDo
	Preload(fields ...field.RelationField) IRoomFriendDo
	FirstOrInit() (*model.RoomFriend, error)
	FirstOrCreate() (*model.RoomFriend, error)
	FindByPage(offset int, limit int) (result []*model.RoomFriend, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRoomFriendDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r roomFriendDo) Debug() IRoomFriendDo {
	return r.withDO(r.DO.Debug())
}

func (r roomFriendDo) WithContext(ctx context.Context) IRoomFriendDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r roomFriendDo) ReadDB() IRoomFriendDo {
	return r.Clauses(dbresolver.Read)
}

func (r roomFriendDo) WriteDB() IRoomFriendDo {
	return r.Clauses(dbresolver.Write)
}

func (r roomFriendDo) Session(config *gorm.Session) IRoomFriendDo {
	return r.withDO(r.DO.Session(config))
}

func (r roomFriendDo) Clauses(conds ...clause.Expression) IRoomFriendDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r roomFriendDo) Returning(value interface{}, columns ...string) IRoomFriendDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r roomFriendDo) Not(conds ...gen.Condition) IRoomFriendDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r roomFriendDo) Or(conds ...gen.Condition) IRoomFriendDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r roomFriendDo) Select(conds ...field.Expr) IRoomFriendDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r roomFriendDo) Where(conds ...gen.Condition) IRoomFriendDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r roomFriendDo) Order(conds ...field.Expr) IRoomFriendDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r roomFriendDo) Distinct(cols ...field.Expr) IRoomFriendDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r roomFriendDo) Omit(cols ...field.Expr) IRoomFriendDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r roomFriendDo) Join(table schema.Tabler, on ...field.Expr) IRoomFriendDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r roomFriendDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRoomFriendDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r roomFriendDo) RightJoin(table schema.Tabler, on ...field.Expr) IRoomFriendDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r roomFriendDo) Group(cols ...field.Expr) IRoomFriendDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r roomFriendDo) Having(conds ...gen.Condition) IRoomFriendDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r roomFriendDo) Limit(limit int) IRoomFriendDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r roomFriendDo) Offset(offset int) IRoomFriendDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r roomFriendDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRoomFriendDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r roomFriendDo) Unscoped() IRoomFriendDo {
	return r.withDO(r.DO.Unscoped())
}

func (r roomFriendDo) Create(values ...*model.RoomFriend) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r roomFriendDo) CreateInBatches(values []*model.RoomFriend, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r roomFriendDo) Save(values ...*model.RoomFriend) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r roomFriendDo) First() (*model.RoomFriend, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoomFriend), nil
	}
}

func (r roomFriendDo) Take() (*model.RoomFriend, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoomFriend), nil
	}
}

func (r roomFriendDo) Last() (*model.RoomFriend, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoomFriend), nil
	}
}

func (r roomFriendDo) Find() ([]*model.RoomFriend, error) {
	result, err := r.DO.Find()
	return result.([]*model.RoomFriend), err
}

func (r roomFriendDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RoomFriend, err error) {
	buf := make([]*model.RoomFriend, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r roomFriendDo) FindInBatches(result *[]*model.RoomFriend, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r roomFriendDo) Attrs(attrs ...field.AssignExpr) IRoomFriendDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r roomFriendDo) Assign(attrs ...field.AssignExpr) IRoomFriendDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r roomFriendDo) Joins(fields ...field.RelationField) IRoomFriendDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r roomFriendDo) Preload(fields ...field.RelationField) IRoomFriendDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r roomFriendDo) FirstOrInit() (*model.RoomFriend, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoomFriend), nil
	}
}

func (r roomFriendDo) FirstOrCreate() (*model.RoomFriend, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoomFriend), nil
	}
}

func (r roomFriendDo) FindByPage(offset int, limit int) (result []*model.RoomFriend, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r roomFriendDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r roomFriendDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r roomFriendDo) Delete(models ...*model.RoomFriend) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *roomFriendDo) withDO(do gen.Dao) *roomFriendDo {
	r.DO = *do.(*gen.DO)
	return r
}
